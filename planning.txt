BUGS TO FIX
===========
If enter incorrect letter for move first letter, crashes.


===================


Planning - Chess in command line.

---
Emerging definitions:
a move is a piece and two arrays, inside an array. If the piece doesn't matter,
the piece is nil.

move = [nil, [7, 0], [5, 1]]  # a1 - b3
move[0] # piece

move[1] # origin square 
move[2] # destination square

move[1][0] origin row
move[1][1] origin col

move[2][0] dest row
move[2][1] dest col

It is passed around as a piece_move pair:
Nb3 = ['N', [7, 0], [5, 1]]
0-0 = ['K', [7, 4], [7, 6]]
I am not sure if identifying the color, by up or down case, is necessary.

Given the proliferation of moves I'm trying to keep them as small and concrete as possible.

Depending on the section of the application, the piece or origin can both be nil.

Given I am refactoring to use this new type - probably I should just create a new class Move, with piece, color, origin, destination and be done with it.
---

Key elements we will need:
- Chess
    - Holds on to the players, board. Can call the save_manager.
    - Keeps track of all moves to display, also for save and load.
    - Handles display of the board and input from players.
    - Knows who's turn it is.
    - Responsibility is to control the flow of the game by passing messages between the other classes.
    - Converts the move notation to something the game can understand and vice versa - so maybe a NotationConverter class or module?
- GameBoard
    - Holds on to the pieces.
    - Knows the state of the board.
    - Responsibility is to update and communicate the state of the board.
    - Maybe another class or module LegalMoveFinder?
- Piece < King, Queen, Rook, Bishop, Knight, Pawn
    - Knows how it can move.
    - Knows its own color.
- Player
    - Responsibility is to make moves.
- SaveManager
    - Responsible to save and load files. Load from directory with basic interface.

Game flow:
INIT the game, board, pieces and players.
DISPLAY the board and players.
WHILE game is not over:
  ASK board for legal moves.
    IF there are no legal moves, the game is won, trigger winning condition.
  ASK next player for move.
  VALIDATE move and send interpreted move information to board.
    UPDATE board, display board
  (I think I will skip 'position repeated three times draw', and at least initially en passant)
  Game DISPLAYS board and move list (flags for 'Check')
END
DISPLAY winner message and offer to play new game.
IF play new game:
  Clear Board
  Switch player colors.
  Next player white
ELSE
  exit
END

8 * 8 board.
8  [0][0] [0][1] [0][2] [0][3] [0][4] [0][5] [0][6] [0][7]
7  [1][0] [1][1] [1][2] [1][3] [1][4] [1][5] [1][6] [1][7]
6  [2][0] [2][1] [2][2] [2][3] [2][4] [2][5] [2][6] [2][7]
5  [3][0] [3][1] [3][2] [3][3] [3][4] [3][5] [3][6] [3][7]
4  [4][0] [4][1] [4][2] [4][3] [4][4] [4][5] [4][6] [4][7]
3  [5][0] [5][1] [5][2] [5][3] [5][4] [5][5] [5][6] [5][7]
2  [6][0] [6][1] [6][2] [6][3] [6][4] [6][5] [6][6] [6][7]
1  [7][0] [7][1] [7][2] [7][3] [7][4] [7][5] [7][6] [7][7]
   a      b      c      d      e      f      g      h

Starting position - one possibility to make it easy to visualise in the code itself:
board = [
    %w[r n b q k b n r],
    %w[p p p p p p p p],
    %w[. . . . . . . .],
    %w[. . . . . . . .],
    %w[. . . . . . . .],
    %w[. . . . . . . .],
    %w[P P P P P P P P], 
    %w[R N B Q K B N R]
]

The question I am least sure about is what these objects in the array should be:
- Simple chars, indexed to a set of Piece objects?
- The actual objects themselves? I.e. 8 white Pawns, 8 black Pawns, etc etc.
I will start by trying the char method.

So the big implementation pieces are:
- LegalMoveFinder is probably the biggest and most complicated. I have to have a Board, Pieces, and movement sorted out for this.
- Parsing the text input is the next most complicated.

I will begin with the legal moves. I think the board will know which piece is moving and the desired square. 
Finding a legal move has two parts: can the piece move there, and does it leave player in check? They can be implemented separately.
Can the piece move there? Thinking about it, the only way I can see to work this out is to find all the legal moves for a piece, and check if they include the given square.
Given that every turn we must check for stalemate, we can start a turn by generating an array of all the legal moves for that piece colour.
legal_moves
- Init array of legal moves
- For each square
  - If nil, continue.

  - If not, identify the piece.
  - For each direction of movement, up to max squares
    - Look at each square along its direction of movement.
      - If it is vacant, it can move there:
        - add to the list of legal moves
      - Else if it is occupied by an enemy piece, it can capture there:
        - add to the list of legal moves and exit loop
      - Else if it is occupied by a friendly piece or it is off the board:
        - Exit loop
    - End loop
  - End loop
  - If no, return no.
  - If yes, is the player then in check?
  - Make the move provisionally on the board and inspect.
in_check?
  - For each opposing piece:
    - Can that piece capture the king? (recursive call to find its moves)
    - (if it can, would that place the opponent in check?)
    - If it can capture the king, return true
  - End loop
If in_check? is false, return true and leave the move on the board.
If in_check? is true, return false and revert the move.

- Is the given square in the array of legal moves?
  

So we need to know the piece's:
- Directions of movement 
- Max squares to move
And this same pair of parameters covers all pieces.

The set of directions are:
orthogonal = [[1, 0], [-1, 0], [0, 1], [0, -1]]
diagonal = [[-1, 1], [-1, -1], [1, 1], [1, -1]]
knight = [[-2, -1], [-2, 1], [-1, -2], [-1, 2], [1, -2], [1, 2], [2, -1], [2, 1]]

Note that for black and white, the movement patterns are all the same with exception of pawn.
Pawn will select only directions beginning with -1 (white) or 1 (black)

Piece
  @color

Pawn
  @first_move?
  @direction
  Directions:
    (diagonal + orthogonal).select { where index 0 == direction }
  Max:
    2 if first_move?, 1 if not.
  Unique:
    Captures one square diagonally forward
    En passant - when an opponents pawn has just moved two spaces forward, it can capture as if it had moved one space forward.
    Promotion:
      If moves to row 0 (white) or row 7 (black) it must promote to any other piece type except King.

Knight
  Directions: knight
  Max:        1

Bishop
  Directions: diagonal
  Max:        8

Rook
  Directions: orthogonal
  Max:        8

Queen
  Directions: orthogonal + diagonal
  Max:        8

King
  Directions: orthogonal + diagonal
  Max:        1

So the pawn is the trickiest to implement - not the place to start. Rather than implementing the entire board and then the interface between, I'll do it piece by piece to uncover problems.

Goals:
Move a single knight around the board using an interface
- Represent an empty game board
- Add a single knight to the game board
- Find its legal moves and return them (skip in_check?) in a format like ['N' [5, 2], [6, 1]] (for a knight on a1)
- Build game shell, player object, simple interface.
- Player inputs a move, if it is in the legal moves set, the game_board moves it.
  - Pseudocode for this game shell
  - Loop
    - Chess collects valid moves from GameBoard
    - Chess asks GameBoard to display its board
    - Loop until valid move
      - (While building - Chess prints the valid moves)
      - Chess asks Player their move
      - MoveConverter converts the player move to standard format or returns nil
      - Chess checks if Player's move is a legal move, returns nil if not
    - End loop
    - Chess sends valid move to GameBoard
  - End loop
* DONE

Move two knights of the same color
- Add another knight
- Board won't move the knight on top of that knight
* DONE

Move 4 knights - now have two players taking turns.
- Add two more knights
- Board will allow capturing moves
* DONE

Add bishops, rooks, queens, kings (still no check)
* DONE

Add Pawns. At this point can play a full game (with humans enforcing check rules and end of game, and no castling)
* DONE

Add 'in_check?'
* DONE

Add castling
* DONE

Add pawn promotion
* DONE

Add en passant
Add 'result?'
Add save and load
Tidy display and clear_display
Introductory message
DONE

BOARD:
White:  ♔♕♖♗♘♙
Black:  ♚♛♜♝♞♟︎


8♜♞♝♛♚♝♞♜
7♟︎♟︎♟︎♟︎♟︎♟︎♟︎♟︎
6
5
4
3
2♙♙♙♙♙♙♙♙
1♖♘♗♕♔♗♘♖
a b c d e f g h


Algebraic notation

Will need a Move object I'm pretty sure - but wait for that

Nb3
Pe4 is written as e4
bxe5 means pawn on b-file takes e5 - Bxe5 means Bishop x e5 - so can't control case.

Captures - x
Note that the capture indication is completely unnecessary and can be omitted.
I think strip out the x's and make it work regardless.

Disambiguating moves
If two rooks can move to same square:
Rab3
or
R5b3
If two queens can move to same square may be necessary to have both
Qh4e1

Promotion - just e8

Castling
0-0 or 0-0-0

Check - append the + but this will be done internally. Strip them out.

Draw offer
(=)

checkmate
#

End of game:
1-0 White won
0-1 Black won
½-½ Draw

1. e4 e5
2. Nf3 Nc6
3. Bb5 a6

OK let's try some rules.
Special moves to check for first:
O-O
O-O-O
If the first letter is lowercase, put P in front of it.
Strip out any 'x'.
* The first letter is always the piece: KQRBNP
* The last two letters are always the destination square.
If the string is 4 characters long the second character is the disambiguating row or colum.
If the string is 5 characters long, the second and third character is disambiguation.
Qh4e1
So pseudocode for validation - goal is to map the input to a standardised ['N', [5, 1]] format for Nb3:
- Check for Castling O-O or O-O-O
- Strip out x and any other character that is not:
  - [abcdefgh12345678KQRBNP] 
- add P to start of start of string if first letter is lowercase
- return nil if length of string is less than 3 or greater than 5
- Add the first letter as the piece n -> ['N']
- Add [] as the origin.
- Map the last two letters as the destination square b3 -> [5, 2]
- If the string is 4 letters long, map the 2nd letter to origin
- If the string is 5 letters long, map both 2nd and 3rd letter to origin

Planning for 'check'.
I will resist looking this up at all and just think it through.
It seems like this will exponentially increase the computational complexity so will be interesting.

Definition of in check = It is my move. If it were my opponent's move, at least one of their pieces has a move with destination square = my king's square.

If not in check - can make any normal move (that doesn't put in check).

If in check - any move that is also in check is now illegal.

If there are no legal moves - that triggers win condition.

So:
#in_check?
- Retrieve the array of legal moves, and the position of the king.
- Retrieve the opponent's legal moves in current position.
- If any opponent moves have destination == king position, you are in check.

(As part of this - modify the move_piece method to return the captured piece or nil)
#avoid_moving_into_check
That identifies IF in check. Now, we need to remove legal_moves that do not get us out of check.
- For each legal move once it is identified
  - Make the move on the board, with the capacity to undo it (i.e. store any captured piece temporarily)
  - Is current player in_check?
  - Undo the move (restoring any captured piece)
  - If current player is in check, next - otherwise add the move.
- End loop

Next we need to deal with 'moving into check'.
Actually this collapses to the removing legal_moves step above. We now need to do this for every legal_move, always, before returning it - check if it places us 'in_check?'

Thinking this through - being in check and moving into check collapse into the same thing. You cannot move in a way that allows your opponent to capture your king. So, I simply need to implement the in_check? and avoid_moving_into_check methods (I think).

---

Now adding castling.

I already have castling as part of the move converter, so the player will be able to select it as the king moving to its castled square.
I need to:
- Add it to the legal move finder
- Add it as a special case in move_piece
- Add logic to disallow it once king or rook has moved

It seems like it could be computationally expensive so I need to add an early check for castle disallowed.
Castling is disallowed once the king or the relevant rook have moved.
I can see doing this in two ways:
- Add 4 true/false flags (colour, queen / king side) to GameBoard, and send message to toggle them off every time a king or rook is moved. Method just looks at the flags to know what to check for.
- Add a 'moved' flag in king and rook and send message to toggle it on every time one is moved. Method checks if king has moved, then each rook, and returns the types of castling to check for.

I will use a true/false flag in the game_board to determine whether or not to check for it, and see how this goes.
GameBoard new instance variables:
@white_may_castle_queen_side
@white_may_castle_king_side
@black_may_castle_queen_side
@black_may_castle_king_side

To add it to the legal move finder:
- If white's move and @white_may_castle_queen / king side
  - Check for castling
    - Return false unless squares between king and rook nil
    - Return false if in_check
    - Move king one square - return false if in_check
    - Move king second square - return false if in_check
    - Move the king back to starting position (which is known, don't need to have stored it)
    - Return true
  - End

To add it to move piece:
- If it is a castling move (in the set of 4)
  - (By definition, castling is permitted if the move is received, so don't need to check this is allowed)
  - Switch based on the move - move both king and rook to correct squares.
  - Return nil.

Refactoring the logic for legal move so that it is calculated at the end of each move rather than on demand from Game.
Reason is to avoid having to calculate the king position and the opponent legal moves over and over again.
Stepping through current flow:

Chess -->
Testing_for_check flag:
T   legal_moves                                                         
T   find_king (loop through the board) --> return king pos
T   (loop each square to find pieces)
T   (loop each piece of player color).
T     find_moves_for_piece                                          
T       find_moves (or find_pawn_moves)
T       (loop through each direction)
T         (loop through each square can travel)
T           add_move
T             test_for_check?
T               move_piece (make the move) --> return original occupant
T                 in_check?
F                   legal_moves(loop each piece of opponent color)
F                     find_moves_for_piece
F                       find_moves (or find_pawn_moves)
F                       (loop through each direction)
F                         (loop through each square can travel)
F                           add_move (pushes to opponent moves) --> returns nil
F                         (end loop)
F                       (end loop)
F                       --> returns opponent moves
F                     --> returns opponent moves
F                   --> returns opponent moves
T                 --> returns true or false (check)
T               move_piece (undo the move) --> return nil
T             --> return true or false (check)
T           (add the move to moves if false i.e. not in check)
T         (end loop)
T       (end loop)
T       --> returns moves
T     --> returns moves
T   test_for_castling --> return castling moves
T   test_for_en_passant --> return en_passant moves
T   --> return moves

The only key optimisation I can see is moving the location of king_position.
Move this to be one step earlier - just before find_check - and pass in the result.
- Rather than repeatedly looking for king position - use the king's knowledge of its position.
Done this.
The variable "testing_for_check" isn't correctly named now.
Should be "active_player: true / false"



legal_moves(color, testing_for_check: false)
  
(loop through color's pieces)
find_moves_for_piece

            (if none of the opponent moves lead to check)
            return to add_move

      if not in check --> add_move

En passant
==========
3 new functions are needed for move_pieces, called in this order:
  - if a pawn has captured en passant, remove the piece to its left/right depending on move direction.
  - clear en_passant_options
  - if pawn advances two squares, add an en passant destination square to @en_passant_options

1 new function is needed for legal_moves:
  find_pawn_moves looks for en_passant_options when doing pawn captures.

Implementation steps:
- Add the instance variable DONE
- Add the advance two moves logic DONE
- Add the find legal moves logic DONE
  - Next if
    - Square not occupied by opposing piece
    and
    - Square not an en passant option
    or
- Add the capture logic



Game of the century!
Nf3
Nf6
Pc4
Pg6
Nc3
Bg7
Pd4
O-O
Bf4
Pd5
Qb3
dc4
Qc4
Pc6
Pe4
Nbd7
Rd1
Nb6
Qc5
Bg4
Bg5
Na4
Qa3
Nc3
bc3
Ne4
Be7
Qb6
Bc4
Nc3
Bc5
Rfe8
Kf1
Be6
Bb6
Bc4
Kg1
Ne2
Kf1
Nd4
Kg1
Ne2
Kf1
Nc3
Kg1
ab6
Qb4
Ra4
Qb6
Nd1
Ph3
Ra2
Kh2
Nf2
Re1
Re1
Qd8
Bf8
Ne1
Bd5
Nf3
Ne4
Qb8
Pb5
Ph4
Ph5
Ne5
Kg7
Kg1
Bc5
Kf1
Ng3
Ke1
Bb4
Kd1
Bb3
Kc1
Ne2
Kb1
Nc3
Kc1
Rc2

